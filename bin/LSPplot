#!/usr/bin/env python

'''

LOTAAS Single Pulse searcher

Written by Daniele Michilli

'''

import os
import time
import argparse
import pandas as pd

import LSPplot


def parser():
  #---------------------
  # Command-line options
  #---------------------

  parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,description="The program read the database in the current directory created through DBmaker.py")
  parser.add_argument("-s", help="Plot marks with size depending on sigma (slower).", action='store_true')
  parser.add_argument("-l", help="Plot marks with line width depending on down factor (slower).", action='store_true')
  parser.add_argument("-c", help="Plot marks with colour depending on beam number (slower).", action='store_true')
  parser.add_argument("-rfi", type=int, nargs=1, default=1, help="Set the maximum rfi level to show (0 to exclude RFI).")
  parser.add_argument("-dmlo", type=float, nargs=1, default=False, help="Set the lower DM to show.")
  parser.add_argument("-dmhi", type=float, nargs=1, default=False, help="Set the higher DM to show.")
  parser.add_argument("-tmlo", type=float, nargs=1, default=False, help="Set the lower time to show.")
  parser.add_argument("-tmhi", type=float, nargs=1, default=False, help="Set the higher time to show.")
  parser.add_argument("-sap", type=int, nargs='+', default=False, help="Set the SAP number.")
  parser.add_argument("-beam", type=int, nargs='+', default=False, help="Set the BEAM number.")
  parser.add_argument("-pulse", type=int, nargs='+', default=False, help="Set the codes of the pulses.")

  args = parser.parse_args()

  return args


def read_DB(idL,args):
  puls = pd.read_hdf('sp/SinlgePulses.hdf5',idL+'_pulses',where=['Pulse>=0'])
  puls_rfi = pd.read_hdf('sp/SinlgePulses.hdf5',idL+'_pulses',where=['(Pulse>0)&(Pulse<=args.rfi)'])
  meta_data = pd.read_hdf('sp/SinlgePulses.hdf5','meta_data')
  top_candidates = puls.groupby(['SAP','BEAM'],sort=False).head(10)
  
  #-----------------------------------
  #Selection of values in the database
  #-----------------------------------
  
  if args.dmlo: 
    puls = puls[puls['DM']>args.dmlo]
    puls_rfi = puls_rfi[puls_rfi['DM']>args.dmlo]
    top_candidates = top_candidates[top_candidates['DM']>args.dmlo]
  if args.dmhi: 
    puls = puls[puls['DM']<args.dmhi]
    puls_rfi = puls_rfi[puls_rfi['DM']<args.dmhi]    
    top_candidates = top_candidates[top_candidates['DM']<args.dmhi]    
  if args.tmlo: 
    puls = puls[puls['Time']>args.tmlo]
    puls_rfi = puls_rfi[puls_rfi['Time']>args.tmlo]
    top_candidates = top_candidates[top_candidates['Time']>args.tmlo]
  if args.tmhi: 
    puls = puls[puls['Time']<args.tmhi]
    puls_rfi = puls_rfi[puls_rfi['Time']<args.tmhi]
    top_candidates = top_candidates[top_candidates['Time']<args.tmhi]
  if args.sap: 
    puls = puls[puls['SAP'].isin(args.sap)]
    puls_rfi = puls_rfi[puls_rfi['SAP'].isin(args.sap)]
    top_candidates = top_candidates[top_candidates['SAP'].isin(args.sap)]
    meta_data = meta_data[meta_data['SAP'].astype(int).isin(args.sap)]
  if args.beam: 
    puls = puls[puls['BEAM'].isin(args.beam)]
    puls_rfi = puls_rfi[puls_rfi['BEAM'].isin(args.beam)]
    top_candidates = top_candidates[top_candidates['BEAM'].isin(args.beam)]
    meta_data = meta_data[meta_data['BEAM'].astype(int).isin(args.beam)]
  if args.pulse: 
    puls = puls[puls.index.isin(args.pulse)]
    puls_rfi = puls_rfi[puls_rfi.index.isin(args.pulse)]
    top_candidates = top_candidates[top_candidates.index.isin(args.pulse)]
   
  #if top_candidates are created here, always 10 pulses are plotted!
  
  
  
  #puls = puls[(puls['DM']>args.dmlo) & (puls['DM']<args.dmhi) & (puls['Time']>args.tmlo) & (puls['Time']<args.tmhi) & (puls['SAP'].isin(args.sap)) & (puls['BEAM'].isin(args.beam))]
  #puls_rfi = puls_rfi[(puls_rfi['DM']>args.dmlo) & (puls_rfi['DM']<args.dmhi) & (puls_rfi['Time']>args.tmlo) & (puls_rfi['Time']<args.tmhi) & (puls_rfi['SAP'].isin(args.sap)) & (puls_rfi['BEAM'].isin(args.beam))]
  
  if puls.empty:
    print "\nNo pulses found!"
    exit()
  
  data = pd.read_hdf('sp/SinlgePulses.hdf5',idL,where=['Pulse=puls.index.tolist()'])
  
    
  try:
    best_pulses = pd.read_hdf('sp/SinlgePulses.hdf5','best_pulses')
  except KeyError:
    best_pulses = pd.DataFrame()
    
  return puls,puls_rfi,data,meta_data,top_candidates,best_pulses



def main():
  #--------------------------------------------------------------------
  # If the DataBase already exists open it, otherwise creates a new one
  #--------------------------------------------------------------------
  
  args = parser()
  idL = os.path.basename(os.getcwd())
  

  if (os.path.isfile('sp/SinlgePulses.hdf5')):
    print "The DataBase will be plotted."
    
    puls,puls_rfi,data,meta_data,top_candidates,best_pulses = read_DB(idL,args)

    dim = len(puls.SAP.unique())+len(puls.BEAM.unique())-1
      
    if dim<=1:
      LSPplot.plot(idL,puls,puls_rfi,meta_data,top_candidates,best_pulses)
      LSPplot.sp(idL,top_candidates,data,meta_data)
    else:
      if top_candidates.empty: print "\nNo pulses found!"
      else: LSPplot.obs_top_candidates(idL,top_candidates,best_pulses)
      #LSPplot.beams()
  
  else:
    print "\nThe DataBase doesn't exists.\nUse the command SPclean to create it!"
    
  return
    
    
if __name__ == '__main__':
  main()