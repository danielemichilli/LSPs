#!/usr/bin/env python

'''

LOTAAS Single Pulse searcher

Written by Daniele Michilli

'''

import scipy.special #necessary for a bug on Cartesius
import os
import time
import argparse
import warnings
import numpy as np
import pandas as pd
import logging
import sys
import shutil
import subprocess
import StringIO

import SPclean
import Parameters
import Paths

def parser():
  #---------------------
  # Command-line options
  #---------------------

  parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,description="The program creates a DataBase of the events in the observation.")
  parser.add_argument('idL', nargs=1, help='Observation ID')
  parser.add_argument('-folder', nargs=1, help='Path of the folder containig the observation')
  parser.add_argument('-pl','--pipeline',help="Automate the procedure",action='store_const',const=logging.ERROR,default=logging.INFO)
  parser.add_argument('-w', help="Force the creation of a DataBase also if another is already present.",action='store_true')
  parser.add_argument('-conf', help="Run over confirmation observations.",action='store_true')
  parser.add_argument('-load_DB', help="Load events from a DataBase instead of text files.",action='store_true')
  parser.add_argument('--debug', help="Debug mode: shows all the warnings.",action='store_true')
  args = parser.parse_args()
  
  ch = logging.StreamHandler()
  formatter = logging.Formatter('%(message)s')
  ch.setLevel(args.pipeline)
  ch.setFormatter(formatter)
  logging.getLogger('').addHandler(ch)
  
  return args



def create_DB(folder,idL,args):
  conf = args.conf
  
  ALERTS = 0
  if os.path.exists('{}{}/sp'.format(folder,idL)): 
    if os.path.exists('{}{}/sp/ALERTS'.format(folder,idL)):
       shutil.move('{}{}/sp/ALERTS','{}{}')
       ALERTS = 1
    shutil.rmtree('{}{}/sp'.format(folder,idL))

  os.makedirs('{}{}/sp/diagnostics'.format(folder,idL))
  os.makedirs('{}{}/sp/candidates'.format(folder,idL))
  if ALERTS == 1:
    shutil.move('{}{}/ALERTS','{}{}/sp')
  
  TIME_FORMAT = '%Y/%m/%d - %H:%M:%S'
  logformat = '[%(asctime)s] - %(message)s'
  formatter = logging.Formatter(fmt=logformat, datefmt=TIME_FORMAT) 
  fh = logging.FileHandler('{}{}/sp/processing.log'.format(folder,idL))
  fh.setLevel(logging.WARNING)
  fh.setFormatter(formatter)
  logging.getLogger('').addHandler(fh)
  
  fileName, fileExtension = os.path.splitext(Parameters.__file__)  
  f = open('{}.py'.format(fileName), 'r')
  param_out = StringIO.StringIO()
  for line in f.readlines():
        if not line.startswith(('#','\n')):
            param_out.write(line)
  f.close()
  git_folder = '{}/.git'.format(os.path.dirname(os.path.dirname(fileName)))
  vers = subprocess.check_output(['git','--git-dir',git_folder,'describe','--tags','--abbrev=0','--always']).strip()
  logging.warning("LSPs version: %s\n"%(vers))
  logging.warning("Parameters used:\n\n%s\n\n"%(param_out.getvalue()))
  
  logging.warning("The DataBase is being created.\n")
  
  try:
    time0 = time.time()
    SPclean.obs_events(folder,idL,conf=conf)
    logging.warning("The DataBase has been created.")
    logging.warning("Time spent: %.2f s"%(time.time() - time0))
    
  except Exception as e:
    logging.exception("ATTENTION!\n\nProcessing Error: \n\n")

    
  return
    

def main():
  #--------------------------------------------------------------------
  # If the DataBase already exists open it, otherwise creates a new one
  #--------------------------------------------------------------------
  args = parser()
  if not args.debug: warnings.filterwarnings("ignore")
  

  if args.folder: folder = args.folder[0] + '/'
  else: folder = Paths.OBS_FOLDER + '/'
  idL = args.idL[0] #os.path.basename(os.getcwd())

  #If the DataBase exists and the -w option is abstent plots it
  if not os.path.isfile('{}{}/sp/SinglePulses.hdf5'.format(folder,idL)):
    create_DB(folder,idL,args)
    
  #Otherwise create a new DataBase
  elif args.w:
    logging.info("\nA new DataBase will be created.\nATTENTION: The old DataBase will be deleted!")

    if args.pipeline>logging.INFO:
      create_DB(folder,idL,args)

    elif raw_input("A DataBase is already present.\nDo you want to overwrite it? [y/n] ") == 'y':
      create_DB(folder,idL,args)

  else:
    logging.info("The DataBase already exists!\nUse the command LSPplot to plot it or the -w option to overwrite it.")



if __name__ == '__main__':
  try:
    main()
  except Exception as e:
    logging.exception("ATTENTION!\n\nProcessing Error: \n\n")
